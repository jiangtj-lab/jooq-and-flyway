/*
 * This file is generated by jOOQ.
 */
package com.jiangtj.demovdsegf.jooq.tables;


import com.jiangtj.demovdsegf.jooq.Keys;
import com.jiangtj.demovdsegf.jooq.Mydatabase;
import com.jiangtj.demovdsegf.jooq.tables.records.FoodsRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 水果
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Foods extends TableImpl<FoodsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mydatabase.foods</code>
     */
    public static final Foods FOODS = new Foods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FoodsRecord> getRecordType() {
        return FoodsRecord.class;
    }

    /**
     * The column <code>mydatabase.foods.id</code>.
     */
    public final TableField<FoodsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mydatabase.foods.create_time</code>. 创建时间
     */
    public final TableField<FoodsRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>mydatabase.foods.modify_time</code>. 修改时间
     */
    public final TableField<FoodsRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("modify_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "修改时间");

    /**
     * The column <code>mydatabase.foods.name</code>. 名字
     */
    public final TableField<FoodsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(32).nullable(false), this, "名字");

    /**
     * The column <code>mydatabase.foods.price</code>. 单价
     */
    public final TableField<FoodsRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER.nullable(false), this, "单价");

    /**
     * The column <code>mydatabase.foods.is_deleted</code>. 是否删除 0 否 1 是
     */
    public final TableField<FoodsRecord, Byte> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.TINYINT)), this, "是否删除 0 否 1 是");

    private Foods(Name alias, Table<FoodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Foods(Name alias, Table<FoodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("水果"), TableOptions.table());
    }

    /**
     * Create an aliased <code>mydatabase.foods</code> table reference
     */
    public Foods(String alias) {
        this(DSL.name(alias), FOODS);
    }

    /**
     * Create an aliased <code>mydatabase.foods</code> table reference
     */
    public Foods(Name alias) {
        this(alias, FOODS);
    }

    /**
     * Create a <code>mydatabase.foods</code> table reference
     */
    public Foods() {
        this(DSL.name("foods"), null);
    }

    public <O extends Record> Foods(Table<O> child, ForeignKey<O, FoodsRecord> key) {
        super(child, key, FOODS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mydatabase.MYDATABASE;
    }

    @Override
    public Identity<FoodsRecord, Long> getIdentity() {
        return (Identity<FoodsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FoodsRecord> getPrimaryKey() {
        return Keys.KEY_FOODS_PRIMARY;
    }

    @Override
    public Foods as(String alias) {
        return new Foods(DSL.name(alias), this);
    }

    @Override
    public Foods as(Name alias) {
        return new Foods(alias, this);
    }

    @Override
    public Foods as(Table<?> alias) {
        return new Foods(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Foods rename(String name) {
        return new Foods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Foods rename(Name name) {
        return new Foods(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Foods rename(Table<?> name) {
        return new Foods(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, LocalDateTime, LocalDateTime, String, Integer, Byte> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super Byte, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Integer, ? super Byte, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
