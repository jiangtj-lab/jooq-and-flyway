/*
 * This file is generated by jOOQ.
 */
package com.jiangtj.demovdsegf.jooq.performance_schema.tables;


import com.jiangtj.demovdsegf.jooq.performance_schema.PerformanceSchema;
import com.jiangtj.demovdsegf.jooq.performance_schema.tables.records.ProcesslistRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Processlist extends TableImpl<ProcesslistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>performance_schema.processlist</code>
     */
    public static final Processlist PROCESSLIST = new Processlist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProcesslistRecord> getRecordType() {
        return ProcesslistRecord.class;
    }

    private Processlist(Name alias, Table<ProcesslistRecord> aliased) {
        this(alias, aliased, null);
    }

    private Processlist(Name alias, Table<ProcesslistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>performance_schema.processlist</code> table
     * reference
     */
    public Processlist(String alias) {
        this(DSL.name(alias), PROCESSLIST);
    }

    /**
     * Create an aliased <code>performance_schema.processlist</code> table
     * reference
     */
    public Processlist(Name alias) {
        this(alias, PROCESSLIST);
    }

    /**
     * Create a <code>performance_schema.processlist</code> table reference
     */
    public Processlist() {
        this(DSL.name("processlist"), null);
    }

    public <O extends Record> Processlist(Table<O> child, ForeignKey<O, ProcesslistRecord> key) {
        super(child, key, PROCESSLIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : PerformanceSchema.PERFORMANCE_SCHEMA;
    }

    @Override
    public Processlist as(String alias) {
        return new Processlist(DSL.name(alias), this);
    }

    @Override
    public Processlist as(Name alias) {
        return new Processlist(alias, this);
    }

    @Override
    public Processlist as(Table<?> alias) {
        return new Processlist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Processlist rename(String name) {
        return new Processlist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Processlist rename(Name name) {
        return new Processlist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Processlist rename(Table<?> name) {
        return new Processlist(name.getQualifiedName(), null);
    }
}
